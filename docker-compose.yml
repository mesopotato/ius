services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--api.insecure=${TRAEFIK_API_INSECURE}"
      - "--providers.docker=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - ${TRAEFIK_TLS_CHALLENGE_COMMAND}
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"
    networks:
      - app-network
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

  nextjs:
    build:
      context: ./iusreact
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
      target: ${BUILD_TARGET}
    environment:
      ENV: ${ENV}
    expose:
      - "3000"
    env_file:
      - ./iusreact/.env.${ENV}
    depends_on:
      - iusapi
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.nextjs.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - ${TRAEFIK_TLS_LABEL_NEXTJS}
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"

  iusapi:
    build:
      context: ./iusapi
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
    expose:
      - "3001"
    env_file:
      - ./iusapi/.env.${ENV}
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.iusapi.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.iusapi.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - ${TRAEFIK_TLS_LABEL_IUSAPI}
      - "traefik.http.services.iusapi.loadbalancer.server.port=3001"

  db:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
    driver: local
  letsencrypt:

networks:
  app-network:
    driver: bridge
