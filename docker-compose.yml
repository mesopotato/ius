services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

  nextjs:
    build:
      context: ./iusreact  # path to the Next.js app directory
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - iusapi
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`iuslex.cloud`) && PathPrefix(`/`)"
      - "traefik.http.routers.nextjs.entrypoints=websecure"
      - "traefik.http.routers.nextjs.tls.certresolver=myresolver"
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"
      

  iusapi:
    build:
      context: ./iusapi  # path to the Node.js iusapi directory
      dockerfile: Dockerfile
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:secure@db:5432/db
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.iusapi.rule=Host(`iuslex.cloud`) && PathPrefix(`/api`)"
      - "traefik.http.routers.iusapi.entrypoints=websecure"
      - "traefik.http.routers.iusapi.tls.certresolver=myresolver"
      - "traefik.http.services.iusapi.loadbalancer.server.port=3001"

  db:
    image: ankane/pgvector:latest  # Use the pgvector image instead of plain postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secure
      POSTGRES_DB: db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
    driver: local
  letsencrypt:

networks:
  app-network:
    driver: bridge
